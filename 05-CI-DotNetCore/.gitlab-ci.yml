stages:
  - "test"
  - "build"
  - "deploy"
  - "destroy"

unit_tests:
  stage: "test"
  image: mcr.microsoft.com/dotnet/sdk:6.0
  tags:
    - "docker"
  script:
    - dotnet test ./dotnet/wa-app.Tests/ --logger:"junit;LogFilePath=../artifacts/{assembly}-test-result.xml;MethodFormat=Class;FailureBodyFormat=Verbose"
  artifacts:
    when: always
    paths:
      - "./**/*test-result.xml"
    reports:
      junit:
        - "./**/*test-result.xml"
  only:
    - merge_request

solution_build:
  stage: "build"
  needs:
    - unit_tests
  image: mcr.microsoft.com/dotnet/sdk:6.0
  tags:
    - "docker"
  script:
    - dotnet publish ./dotnet/wa-app/ $DOTNET_CLI_OPTIONS
  variables: 
    DOTNET_CLI_OPTIONS: '-c ${BUILD_TYPE}'
  artifacts:
    untracked: false
    expire_in: 30 days
    paths:
      - "./dotnet/wa-app/bin/${BUILD_TYPE}/net6.0/publish/*"
  only:
  - merge_request

build_docker:
  stage: "build"
  needs:
    - unit_tests
  tags:
    - "local"
  before_script:
    - docker info
  script:
    - cd dotnet && docker build --build-arg API_VERSION=1.1.${CI_PIPELINE_ID} --build-arg BUILD_NUMBER=${CI_PIPELINE_ID} --tag wa-app:v1.1.${CI_PIPELINE_ID}-${CI_COMMIT_SHA} .
    - docker login -u ${jFrogUser} -p ${jFrogPass} ${jFrogServer}
    - docker tag wa-app:v1.1.${CI_PIPELINE_ID}-${CI_COMMIT_SHA} ${jFrogServer}/wa-docker-local/wa-app:v1.1.${CI_PIPELINE_ID}-${CI_COMMIT_SHA}
    - docker push ${jFrogServer}/wa-docker-local/wa-app:v1.1.${CI_PIPELINE_ID}-${CI_COMMIT_SHA}   
  only:
  - merge_request

deploy_infrastruture:
  stage: deploy
  needs: [build_docker]
  tags:
    - "docker"
  environment:
    name: dev-0
    deployment_tier: development
    on_stop: destroy_infrastructure
  image: registry.gitlab.com/gitlab-org/terraform-images/stable:latest
  variables:
    TF_ROOT: ${CI_PROJECT_DIR}/infra
    TF_ADDRESS: ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/terraform/state/dev-0
  cache:
    key: dev-0
    paths:
      - ${TF_ROOT}/.terraform
  before_script:
    - cd ${TF_ROOT}
  script:
    - gitlab-terraform init 
    - gitlab-terraform validate
    - gitlab-terraform plan -var="app_version=v1.1.${CI_PIPELINE_ID}-${CI_COMMIT_SHA}"
    - gitlab-terraform apply
  when: manual
  artifacts:
    when: always
    paths:
      - "${CI_PROJECT_DIR}/infra/*.ini"
  only:
    - merge_request

deploy_application:
  stage: deploy
  needs: [deploy_infrastruture]
  tags:
    - "local"
  environment:
    name: dev-0
    deployment_tier: development
  variables:
    ANSIBLE_HOST_KEY_CHECKING: 'false'
    ANSIBLE_FORCE_COLOR: 'true'
    ANSIBLE_PYTHON_INTERPRRTER: /usr/bin/python3
  before_script:
  - ansible --version
  - cd ansible
  - mkdir secret
  - echo "$SSH_PRIVATE_KEY" > secret/ansible.key ## import ansible ssh key
  - chmod 400 secret/ansible.key
  - ansible-galaxy collection install community.docker
  script: 
    - ansible-playbook app-playbook.yml -i ${CI_PROJECT_DIR}/infra/inventory.ini --private-key secret/ansible.key --user ${SSH_USER} --extra-vars "jFrogPass=${jFrogPass} appVersion=v1.1.${CI_PIPELINE_ID}-${CI_COMMIT_SHA}"
  only:
    - merge_request

destroy_infrastructure:
  stage: destroy
  needs: [deploy_infrastruture]
  tags:
    - "docker"
  environment:
    name: dev-0
    deployment_tier: development
    action: stop
  image: registry.gitlab.com/gitlab-org/terraform-images/stable:latest
  variables:
    TF_ROOT: ${CI_PROJECT_DIR}/infra
    TF_ADDRESS: ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/terraform/state/dev-0
  cache:
    key: dev-0
    paths:
      - ${TF_ROOT}/.terraform
  before_script:
    - cd ${TF_ROOT}
  script:
    - gitlab-terraform init 
    - gitlab-terraform validate
    - gitlab-terraform plan -var="app_version=v1.1.${CI_PIPELINE_ID}-${CI_COMMIT_SHA}" -destroy
    - gitlab-terraform apply
  when: delayed
  start_in: 5 minutes
  only:
    - merge_request
